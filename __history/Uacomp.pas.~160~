unit Uacomp;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms, uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUImClasses, uniGUIForm, uniGUImForm, uniGUImJSForm,
  unimScrollBox, uniLabel, unimLabel, Vcl.Imaging.pngimage, uniImage, unimImage,
  uniGUIBaseClasses, unimPanel, uniButton, unimButton, uniPageControl, unimMenu,
  uniPanel, unimTabPanel, uniBitBtn, unimBitBtn, uniFileUpload, unimFileUpload,
  unimEdit, uniEdit, uniDBEdit, unimDBEdit, uniMultiItem, unimSelect,
  unimDBSelect, DB, StrUtils;

type
  TfrmAcomp = class(TUnimForm)
    umpHeader: TUnimPanel;
    imgBgHeader: TUnimImage;
    scrlBody: TUnimScrollBox;
    pgMain: TUnimTabPanel;
    pgAcomp: TUnimTabSheet;
    pgDados: TUnimTabSheet;
    UnimPanel1: TUnimPanel;
    LabelUsuario: TUnimLabel;
    UnimScrollBox1: TUnimScrollBox;
    pnlDados: TUnimPanel;
    dbsltMunicipio: TUnimDBSelect;
    edtNome: TUnimDBEdit;
    UnimDBEdit1: TUnimDBEdit;
    UnimDBEdit2: TUnimDBEdit;
    UnimDBEdit3: TUnimDBEdit;
    UnimLabel3: TUnimLabel;
    UnimLabel4: TUnimLabel;
    UnimLabel5: TUnimLabel;
    UnimLabel9: TUnimLabel;
    UnimLabel10: TUnimLabel;
    UnimLabel11: TUnimLabel;
    UnimDBSelect2: TUnimDBSelect;
    LabelSenha: TUnimLabel;
    BtnSalvar: TUnimBitBtn;
    EditSenha: TUnimEdit;
    pgAlterarSenha: TUnimTabSheet;
    UnimPanel2: TUnimPanel;
    EditSenhaConf: TUnimEdit;
    EditSenhaNova: TUnimEdit;
    UnimLabel21: TUnimLabel;
    UnimLabel22: TUnimLabel;
    UnimLabel15: TUnimLabel;
    EditSenhaAtual: TUnimEdit;
    UnimButton1: TUnimButton;
    UnimDBEdit4: TUnimDBEdit;
    UnimDBEdit5: TUnimDBEdit;
    LabelConjugeNome: TUnimLabel;
    LabelConjugeCPF: TUnimLabel;
    UnimPanel3: TUnimPanel;
    pnlTimeLine: TUnimPanel;
    pnl10_ProcessoFinalizado: TUnimPanel;
    pnlIcoProceFin: TUnimPanel;
    dataProcessoFinalizado: TUnimLabel;
    pnl09_AgendaLiberacao: TUnimPanel;
    pnlIcoLibAge: TUnimPanel;
    dataLiberacaoAgendada: TUnimLabel;
    pnl08_AguardarAgendamento: TUnimPanel;
    pnlIcoAguAge: TUnimPanel;
    dataAguardarAgendamento: TUnimLabel;
    pnl01_PreCadadastro: TUnimPanel;
    pnlIcoPreCad: TUnimPanel;
    dataPreCadastro: TUnimLabel;
    pnl02_CadastroAprovado: TUnimPanel;
    pnlIcoCadApr: TUnimPanel;
    dataCadastroAprovado: TUnimLabel;
    pnl03_CadastroReprovado: TUnimPanel;
    pnlIcoCadRep: TUnimPanel;
    dataCadastroReprovado: TUnimLabel;
    pnl04_AgendarCapacitacao: TUnimPanel;
    pnlIcoAgeCap: TUnimPanel;
    dataAgendarCapacitacao: TUnimLabel;
    pnl05_EnviarDocumentacao: TUnimPanel;
    pnlIcoDocPend: TUnimPanel;
    dataEnviarDocumentos: TUnimLabel;
    pnl06_DocumentosAprovados: TUnimPanel;
    pnlIcoDocApr: TUnimPanel;
    dataDocumentosAprovados: TUnimLabel;
    pnl07_DocumentosReprovados: TUnimPanel;
    pnlIcoDocRep: TUnimPanel;
    dataDocumentosReprovados: TUnimLabel;
    pnlDetProceFin: TUnimPanel;
    lblTxtProceFin: TUnimLabel;
    lblTxtProceFin2: TUnimLabel;
    pnlDetLibAge: TUnimPanel;
    lblTxtLibAge: TUnimLabel;
    lblTxtLibAge2: TUnimLabel;
    pnlDetAguAge: TUnimPanel;
    lblTxtAguAge: TUnimLabel;
    lblTxtAguAge2: TUnimLabel;
    pnlDetDocRep: TUnimPanel;
    lblTxtDocRep: TUnimLabel;
    lblTxtDocRep2: TUnimLabel;
    pnlDetPreCad: TUnimPanel;
    lblTxtPreCad: TUnimLabel;
    lblTxtPreCad1: TUnimLabel;
    pnlDetCadApr: TUnimPanel;
    lblTxtCadApr: TUnimLabel;
    lblTxtCadApr2: TUnimLabel;
    pnlDetCadRep: TUnimPanel;
    lblTxtCadRepVerMais: TUnimLabel;
    lblTxtCadRep2: TUnimLabel;
    pnlDetAgeCap: TUnimPanel;
    lblTxtAgeCap: TUnimLabel;
    lblTxtAgeCap2: TUnimLabel;
    pnlDetDocPend: TUnimPanel;
    lblTxtDocPend: TUnimLabel;
    lblTxtDocPend2: TUnimLabel;
    pnlDetDocApr: TUnimPanel;
    lblTxtDocApr: TUnimLabel;
    lblTxtDocApr2: TUnimLabel;
    lblTxtPreCad2: TUnimLabel;
    lblTxtCadApr1: TUnimLabel;
    lblTxtCadRep1: TUnimLabel;
    lblTxtAgeCap1: TUnimLabel;
    lblTxtDocPend1: TUnimLabel;
    lblTxtDocApr1: TUnimLabel;
    lblTxtDocRep1: TUnimLabel;
    lblTxtAguAge1: TUnimLabel;
    lblTxtLibAge1: TUnimLabel;
    lblTxtProceFin1: TUnimLabel;
    lbIcolPreCad: TUnimLabel;
    lbIcoCadApr: TUnimLabel;
    lbIcoCadRep: TUnimLabel;
    lbIcoAgeCap: TUnimLabel;
    lbIcoDocPend: TUnimLabel;
    lbIcoDocApr: TUnimLabel;
    lbIcoDocRep: TUnimLabel;
    lbIcoAguAge: TUnimLabel;
    lbIcoLibAge: TUnimLabel;
    lbIcoProceFin: TUnimLabel;
    UnimLabel1: TUnimLabel;
    UnimImage1: TUnimImage;
    imgLogoAGN: TUnimImage;
    ctnMsgPend: TUnimContainerPanel;
    lblTxtCadRepMais: TUnimLabel;
    UnimLabel6: TUnimLabel;
    lblTxtCadRep: TUnimLabel;
    pgMeusDados: TUnimTabPanel;
    pgDadosPessoais: TUnimTabSheet;
    pgSolicitacao: TUnimTabSheet;
    UnimContainerPanel1: TUnimContainerPanel;
    procedure UnimFormShow(Sender: TObject);
    procedure UnimDBSelect2Change(Sender: TObject);
    procedure BtnSalvarClick(Sender: TObject);
    procedure UnimButton1Click(Sender: TObject);
    procedure UnimDBEdit2Change(Sender: TObject);
    procedure UnimDBEdit3Change(Sender: TObject);
    procedure lblTxtDocPendClick(Sender: TObject);
    procedure UnimLabel1Click(Sender: TObject);
    procedure lblTxtDocRepClick(Sender: TObject);
    procedure UnimLabel6Click(Sender: TObject);
    procedure lblTxtCadRepVerMaisClick(Sender: TObject);
  private
    { Private declarations }
    function validarDados : boolean;
    procedure consultarSolicitacao();
    procedure organizarCards();
    procedure filtrarSolicitacao();
    procedure obterDatas();
    procedure alterarPainelEstadoCivil();
    
  var
    cpfCliente, situacao, linha : string;
    etapaID, solicitacao : Integer;
    datas, obs : array[1..10] of String;

  public
    { Public declarations }
    const casado : string = 'CASADO(A)';

  end;

function frmAcomp: TfrmAcomp;

implementation

{$R *.dfm}

uses
  Mainm, MainModule, Usenha, uniGUIApplication, UanexarDoc;

function frmAcomp: TfrmAcomp;
begin
  Result := TfrmAcomp(UniMainModule.GetFormInstance(TfrmAcomp));
end;

function TfrmAcomp.validarDados : boolean;
var controle : boolean;
begin
  controle := True;

  if UnimDBSelect2.Text = casado then
  begin
    if UnimDBEdit4.Text = '' then
    begin
      ShowMessage('O nome da(o) cônjuge do cliente não foi preenchido.');
      UnimDBEdit4.Color := clRed;
      controle := False;
    end;
    if frmPrincipal.ValidarCPF(UnimDBEdit5.Text) = False then
    begin
      ShowMessage('Cpf do(a) cônjuge não é válido.');
      UnimDBEdit5.Color := clRed;
      controle := False;
    end;
  end;

  if (Length(UnimDBEdit2.Text) < 8) OR (Length(UnimDBEdit2.Text) > 12) then
  begin
    ShowMessage('Número de telefone inválido.');
    UnimDBEdit2.Color := clRed;
    controle := False;
  end;

  if Pos('@', UnimDBEdit3.Text) = 0 then //email cliente
  begin
    UnimDBEdit3.Color := clRed;
    controle := False;
  end;

  if controle then result := True else result := False;
end;

procedure TfrmAcomp.filtrarSolicitacao();
begin
  with UniMainModule.dsSolicitacao.DataSet do
  begin
    Filtered := False;
    Filter := 'ID = ' + IntToStr(solicitacao) ;
    Filtered := True;
  end;
end;

procedure TfrmAcomp.consultarSolicitacao();
var
  idCliente : Integer;
  count : Integer;
begin
  idCliente := UniMainModule.dsCliente.DataSet.FieldByName('ID').AsInteger;
  cpfCliente := UniMainModule.dsCliente.DataSet.FieldByName('CPF').AsString;

//  ShowMessage('idCliente = ' + idCliente.ToString + '; cpfCliente = ' + cpfCliente);

  with UniMainModule.FDQuery do
  begin
    // Otimizar consulta
    SQL.Clear;
    SQL.Add('SELECT count(*) FROM tb_solicitacao s ' +
            'JOIN tb_cliente c ' +
            'ON c.id = ' + idCliente.ToString + ' and c.id = s.cliente;'
            );
    Open();

    count := FieldByName('count').Value;

//    ShowMessage('Count = ' + count.ToString);
    Close;

    if count > 0 then
    begin
      SQL.Clear;
      SQL.Add('SELECT FIRST 1 a.id, c.nome, c.cpf, s.id solicitacao, s.situacao id_etapa, e.nome etapa, a.data ' +
              'FROM tb_acompanhamento a ' +
              'JOIN tb_etapa e ON a.etapa = e.id ' +
              'JOIN tb_solicitacao s ON a.solicitacao = s.id ' +
              'JOIN tb_cliente c ON s.cliente = c.id ' +
              'WHERE c.cpf = ' + QuotedStr(cpfCliente) + ' and s.situacao = a.etapa ' +
              'ORDER BY a.id DESC;'
              );
      Open();

      etapaID := FieldByName('ID_ETAPA').AsInteger;

//      ShowMessage('Id da etapa = ' + etapaID.ToString);

      situacao := FieldByName('ETAPA').AsString;

//      ShowMessage('Etapa (situacao) = ' + situacao);

      solicitacao := FieldByName('SOLICITACAO').AsInteger;

//      ShowMessage(' ID da solicitacao = ' + solicitacao.ToString);

      Close;

    end
    else
    begin
      // Erro, não existem solicitação em andamento ou existe mas de 1 em aberto
    end;

  end;
end;

procedure TfrmAcomp.obterDatas();
var
  I : Integer;
begin
  with UniMainModule.FDQuery do
  begin


    SQL.Clear;
    SQL.Add('SELECT a.id, a.etapa id_etapa, e.nome etapa, a.observacao, a.data ' +
            'FROM tb_acompanhamento a ' +
            'JOIN tb_etapa e ON a.etapa = e.id ' +
            'JOIN tb_solicitacao s ON a.solicitacao = s.id ' +
            'JOIN tb_cliente c ON s.cliente = c.id ' +
            'WHERE c.cpf = ' + QuotedStr(cpfCliente) + ' and ' +
            's.id = ' + IntToStr(solicitacao) + ';'
            );
    Open();



    for I := 1 to etapaID do
    begin
      with UniMainModule.dsViewAcompanhamento.DataSet do
      begin
        Filtered := False;
        Filter := 'SOLICITACAO = ' + IntToStr(solicitacao) + ' AND ' +
                  'ID_ETAPA = ' + IntToStr(I);
        Filtered := True;

        if I = FieldByName('ID_ETAPA').AsInteger then
        begin
          datas[I] := UniMainModule.dsViewAcompanhamento.DataSet.FieldByName('DATA').AsString;
          obs[I]   := UniMainModule.dsViewAcompanhamento.DataSet.FieldByName('OBSERVACAO').AsString;
        end;
      end;

    end;

    Close();
  end;

end;

procedure TfrmAcomp.organizarCards();
var
  data, local, horario: string;
  situacao: integer;
begin

  dataPreCadastro.Caption           := datas[1];
  dataCadastroAprovado.Caption      := datas[2];
  dataCadastroReprovado.Caption     := datas[3];
  dataAgendarCapacitacao.Caption    := datas[4];
  dataEnviarDocumentos.Caption      := datas[5];
  dataDocumentosAprovados.Caption   := datas[6];
  dataDocumentosReprovados.Caption  := datas[7];
  dataAguardarAgendamento.Caption   := datas[8];
  dataLiberacaoAgendada.Caption     := datas[9];
  dataProcessoFinalizado.Caption    := datas[10];

  lblTxtCadRep.Text                 := Copy(obs[3],1,60) + '...';
  lblTxtCadRepMais.Text             := obs[3];

  with UniMainModule.FDQuery do
  begin
    SQL.Clear;
    SQL.Add('SELECT SITUACAO FROM tb_solicitacao where CLIENTE = ' + UniMainModule.dsCliente.DataSet.FieldByName('ID').AsString);
    Open;

    situacao := FieldByName('SITUACAO').Value;
  end;

  {
  case AnsiIndexStr(situacao, ['PRÉ-CADASTRO',
                               'PESQUISA INICIAL SEM PENDÊNCIAS',
                               'PESQUISA INICIAL COM PENDÊNCIAS',
                               'AGENDAR CAPACITAÇÃO',
                               'ENVIAR DOCUMENTOS',
                               'DOCUMENTOS APROVADOS',
                               'DOCUMENTOS REPROVADOS',
                               'AGUARDAR AGENDAMENTO',
                               'AGENDADO',
                               'PROCESSO FINALIZADO',
                               'CAPACITAÇÃO AGENDADA']) of }
    case situacao of
    1 : //Etapa de pré cadastro
    begin
      pnl01_PreCadadastro.Visible := True;
      dataPreCadastro.Font.Color  := clWhite;
      lbIcolPreCad.Font.Color     := clWhite;
      lblTxtPreCad.Font.Color     := clWhite;
      lblTxtPreCad1.Font.Color    := clWhite;
      lblTxtPreCad2.Font.Color    := clWhite;
      pnlIcoPreCad.Color          := $006C3911;
      pnlDetPreCad.Color          := $007D4313;

    end;
    2 : //Cadastro aprovado
    begin
      pnl01_PreCadadastro.Visible     := True;
      pnl02_CadastroAprovado.Visible  := True;
      dataCadastroAprovado.Font.Color := clWhite;
      lbIcoCadApr.Font.Color          := clWhite;
      lblTxtCadApr.Font.Color         := clWhite;
      lblTxtCadApr1.Font.Color        := clWhite;
      lblTxtCadApr2.Font.Color        := clWhite;
      pnlIcoCadApr.Color              := $006C3911;
      pnlDetCadApr.Color              := $007D4313;
    end;
    3 : //Cadastro reprovado
    begin
      pnl01_PreCadadastro.Visible      := True;
      pnl03_CadastroReprovado.Visible  := True;
      dataCadastroReprovado.Font.Color := clWhite;
      lbIcoCadRep.Font.Color           := clWhite;
      lblTxtCadRep.Font.Color          := clWhite;
      lblTxtCadRep1.Font.Color         := clWhite;
      lblTxtCadRep2.Font.Color         := clWhite;
      pnlIcoCadRep.Color               := $006C3911;
      pnlDetCadRep.Color               := $007D4313;
    end;
    4 : //Agendar capacitação
    begin
      pnl01_PreCadadastro.Visible       := True;
      pnl02_CadastroAprovado.Visible    := True;
      pnl04_AgendarCapacitacao.Visible  := True;
      dataAgendarCapacitacao.Font.Color := clWhite;
      lbIcoAgeCap.Font.Color            := clWhite;
      lblTxtAgeCap.Font.Color           := clWhite;
      lblTxtAgeCap1.Font.Color          := clWhite;
      lblTxtAgeCap2.Font.Color          := clWhite;
      pnlIcoAgeCap.Color                := $006C3911;
      pnlDetAgeCap.Color                := $007D4313;
    end;
    5 : //Enviar Documentos
    begin
      pnl01_PreCadadastro.Visible       := True;
      pnl02_CadastroAprovado.Visible    := True;
      if linha = 'CREDJOVEM' then pnl04_AgendarCapacitacao.Visible  := True;
      pnl05_EnviarDocumentacao.Visible  := True;
      dataEnviarDocumentos.Font.Color   := clWhite;
      lbIcoDocPend.Font.Color           := clWhite;
      lblTxtDocPend.Font.Color          := clWhite;
      lblTxtDocPend1.Font.Color         := clWhite;
      lblTxtDocPend2.Font.Color         := clWhite;
      pnlIcoDocPend.Color               := $006C3911;
      pnlDetDocPend.Color               := $007D4313;
    end;
    6 : //Documentos aprovados
    begin
      pnl01_PreCadadastro.Visible        := True;
      pnl02_CadastroAprovado.Visible     := True;
      if linha = 'CREDJOVEM' then pnl04_AgendarCapacitacao.Visible   := True;
      pnl05_EnviarDocumentacao.Visible   := True;
      pnl06_DocumentosAprovados.Visible  := True;
      dataDocumentosAprovados.Font.Color := clWhite;
      lbIcoDocApr.Font.Color             := clWhite;
      lblTxtDocApr.Font.Color            := clWhite;
      lblTxtDocApr1.Font.Color           := clWhite;
      lblTxtDocApr2.Font.Color           := clWhite;
      pnlIcoDocApr.Color                 := $006C3911;
      pnlDetDocApr.Color                 := $007D4313;
    end;
    7 : //Documentos Reprovados
    begin
      pnl01_PreCadadastro.Visible        := True;
      pnl02_CadastroAprovado.Visible     := True;
      if linha = 'CREDJOVEM' then pnl04_AgendarCapacitacao.Visible   := True;
      pnl05_EnviarDocumentacao.Visible   := True;
      pnl07_DocumentosReprovados.Visible := True;
      dataDocumentosReprovados.Font.Color := clWhite;
      lbIcoDocRep.Font.Color             := clWhite;
      lblTxtDocRep.Font.Color            := clWhite;
      lblTxtDocRep1.Font.Color           := clWhite;
      lblTxtDocRep2.Font.Color           := clWhite;
      pnlIcoDocRep.Color                 := $006C3911;
      pnlDetDocRep.Color                 := $007D4313;
    end;
    8 : //Aguardar agendamento
    begin
      pnl01_PreCadadastro.Visible        := True;
      pnl02_CadastroAprovado.Visible     := True;
      if linha = 'CREDJOVEM' then pnl04_AgendarCapacitacao.Visible   := True;
      pnl05_EnviarDocumentacao.Visible   := True;
      pnl06_DocumentosAprovados.Visible  := True;
      pnl08_AguardarAgendamento.Visible  := True;
      dataAguardarAgendamento.Font.Color := clWhite;
      lbIcoAguAge.Font.Color             := clWhite;
      lblTxtAguAge.Font.Color            := clWhite;
      lblTxtAguAge1.Font.Color           := clWhite;
      lblTxtAguAge2.Font.Color           := clWhite;
      pnlIcoAguAge.Color                 := $006C3911;
      pnlDetAguAge.Color                 := $007D4313;
    end;
    9 : //Agendar liberação
    begin
      pnl01_PreCadadastro.Visible        := True;
      pnl02_CadastroAprovado.Visible     := True;
      if linha = 'CREDJOVEM' then pnl04_AgendarCapacitacao.Visible   := True;
      pnl05_EnviarDocumentacao.Visible   := True;
      pnl06_DocumentosAprovados.Visible  := True;
      pnl08_AguardarAgendamento.Visible  := True;
      pnl09_AgendaLiberacao.Visible      := True;
      dataLiberacaoAgendada.Font.Color   := clWhite;
      lbIcoLibAge.Font.Color             := clWhite;
      lblTxtLibAge.Font.Color            := clWhite;
      lblTxtLibAge1.Font.Color           := clWhite;
      lblTxtLibAge2.Font.Color           := clWhite;
      pnlIcoLibAge.Color                 := $006C3911;
      pnlDetLibAge.Color                 := $007D4313;
    end;
    10 : //Processo finalizado
    begin
      pnl01_PreCadadastro.Visible       := True;
      pnl02_CadastroAprovado.Visible    := True;
      if linha = 'CREDJOVEM' then pnl04_AgendarCapacitacao.Visible  := True;
      pnl05_EnviarDocumentacao.Visible  := True;
      pnl06_DocumentosAprovados.Visible := True;
      pnl08_AguardarAgendamento.Visible := True;
      pnl09_AgendaLiberacao.Visible     := True;
      pnl10_ProcessoFinalizado.Visible  := True;
      dataProcessoFinalizado.Font.Color := clWhite;
      lbIcoProceFin.Font.Color          := clWhite;
      lblTxtProceFin.Font.Color         := clWhite;
      lblTxtProceFin1.Font.Color        := clWhite;
      lblTxtProceFin2.Font.Color        := clWhite;
      pnlIcoProceFin.Color              := $006C3911;
      pnlDetProceFin.Color              := $007D4313;
    end;
     11 : //Capacitação agendada
    begin
      pnl01_PreCadadastro.Visible       := True;
      pnl02_CadastroAprovado.Visible    := True;
      pnl04_AgendarCapacitacao.Visible  := True;
      dataAgendarCapacitacao.Font.Color := clWhite;
      lbIcoAgeCap.Font.Color            := clWhite;
      lblTxtAgeCap.Font.Color           := clWhite;
      lblTxtAgeCap1.Font.Color          := clWhite;
      lblTxtAgeCap2.Font.Color          := clWhite;
      pnlIcoAgeCap.Color                := $006C3911;
      pnlDetAgeCap.Color                := $007D4313;

      //Verifica se já foi agendada a capacitação
      with UniMainModule.FDQuery do
      begin
        Close;
        SQL.Clear;
        SQL.Add('select CLIENTE, HORARIO, DATA, LOCAL from tb_capacitacao where CLIENTE = ' + intToStr(frmPrincipal.IDcliente));
        Open;
      end;
      if UniMainModule.FDQuery.FieldCount > 0 then
      begin
        lblTxtAgeCap1.Caption := 'Capacitação';
        lblTxtAgeCap2.Caption := 'Agendada';
        data                  := UniMainModule.FDQuery.FieldByName('DATA').Value;
        local                 := UniMainModule.FDQuery.FieldByName('LOCAL').Value;
        horario               := UniMainModule.FDQuery.FieldByName('HORARIO').Value;
        lblTxtAgeCap.Caption  := 'Data: ' + data + ' Horário: ' + horario + ' | ' + local;
      end;

    end;

  end;
end;

procedure TfrmAcomp.alterarPainelEstadoCivil;
begin
  if UniMainModule.dsCliente.DataSet.FieldByName('ESTADOCIVIL').Value = 'CASADO(A)' then
  begin
    UnimPanel3.Height := 145;
    UnimPanel3.Visible := True;
  end
  else
  begin
    UnimPanel3.Height := 0;
    UnimPanel3.Visible := False;
  end;
end;

procedure TfrmAcomp.BtnSalvarClick(Sender: TObject);
var
  senhaDigitada : string;
  senhaSalva    : string;
begin

  senhaDigitada := frmPrincipal.MD5(EditSenha.Text);
  senhaSalva := UniMainModule.dsUsuario.DataSet.FieldByName('senha').Value;
  if ValidarDados then
  begin
    if senhaDigitada = senhaSalva then
    begin
      UniMainModule.dsUsuario.DataSet.Edit;
      UniMainModule.dsCliente.DataSet.Edit;

      UniMainModule.dsUsuario.DataSet.Post;
      UniMainModule.dsCliente.DataSet.Post;

      EditSenha.Text := '';
      ShowMessage('Dados Alterados com sucesso');
    end
    else
    begin
      EditSenha.Text := '';
      ShowMessage('Senha inválida, por favor digite sua senha novamente');
    end;
  end
  else
  begin
    EditSenha.Text := '';
    //filtrar os dados novamente para desfazer as alterações do usuário?
  end;

end;

procedure TfrmAcomp.UnimButton1Click(Sender: TObject);
var
  senhaAtual    : string;
  senhaAtualMD5 : string;
  senhaSalva    : string;
  senhaNova     : string;
  senhaNovaConf : string;
begin

  senhaSalva    := UniMainModule.dsUsuario.DataSet.FieldByName('senha').Value;
  senhaAtual    := EditSenhaAtual.Text;
  senhaAtualMD5 := frmPrincipal.MD5(senhaAtual);
  senhaNova     := EditSenhaNova.Text;
  senhaNovaConf := EditSenhaConf.Text;

  EditSenhaAtual.Text := '';
  EditSenhaNova.Text  := '';
  EditSenhaConf.text  := '';

  case Usenha.alterarSenha(senhaAtual, senhaAtualMD5, senhaSalva, senhaNova, senhaNovaConf) of
    1:
    begin
      with UniMainModule.dsUsuario.DataSet do
      begin
        edit;
        FieldByName('SENHA').Value := frmPrincipal.MD5(senhaNova);
        post;
      end;
      ShowMessage('Senha alterada com sucesso.');
    end;
    2:
    begin
      ShowMessage('Senha inválida, por favor digite uma senha que tenha pelo menos 6 caracteres.');
    end;
    3:
    begin
      ShowMessage('Erro, a senha nova precisa ser diferente da senha antiga.');
    end;
    4:
    begin
      ShowMessage('As senhas não coincidem, por favor certifique-se que as duas senhas sejam iguais.');
    end;
    5:
    begin
      ShowMessage('Senha atual não foi inserida corretamente');
    end
    else
    begin
      ShowMessage('Não foi possível alterar a senha');
    end;
  end;

end;

procedure TfrmAcomp.UnimDBEdit2Change(Sender: TObject);
begin
  UnimDBEdit2.Color := clWindow;
end;

procedure TfrmAcomp.UnimDBEdit3Change(Sender: TObject);
begin
  UnimDBEdit3.Color := clWindow;
end;

procedure TfrmAcomp.UnimDBSelect2Change(Sender: TObject);
begin
  alterarPainelEstadoCivil();
end;

procedure TfrmAcomp.UnimFormShow(Sender: TObject);
var
  usuario : string;
  cliente : string;
begin

  //Exibe mensagem de boas vindas com nome do usuario logado
  LabelUsuario.Caption := 'Bem vindo(a), ' + UniMainModule.dsUsuario.DataSet.FieldByName('NOME').Value + '.';

  //Salva o ID do usuário em uma variável local
  usuario := UniMainModule.dsUsuario.DataSet.FieldByName('ID').AsString;

  //Filtra o cadastro do cliente
  with UniMainModule.dsCliente.DataSet do
  begin
    Filtered := False;
    Filter := 'USUARIO = ' + QuotedStr(usuario);
    Filtered := True;
  end;

  //Armazena o ID do cliente em uma variável local
  cliente := UniMainModule.dsCliente.DataSet.FieldByName('ID').AsString;

  //Filtra a solicitação do cliente
  with UniMainModule.dsSolicitacao.DataSet do
  begin
    Filtered := False;
    Filter := 'CLIENTE = ' + QuotedStr(cliente);
    Filtered := True;

    if FieldByName('LINHA').IsNull then
      linha := ''
    else
      linha := FieldByName('LINHA').Value;
  end;

  //Organizar tela "Meus dados" de acordo com estado civil do usuario logado
  alterarPainelEstadoCivil();

  consultarSolicitacao();

  filtrarSolicitacao();

  obterDatas();

  //Organizar timeline de acordo com etapa que o cliente está
  organizarCards();

end;

procedure TfrmAcomp.UnimLabel1Click(Sender: TObject);
begin
  if UniMainModule.msg('Tem certeza que deseja sair?') then Close;
end;

procedure TfrmAcomp.UnimLabel6Click(Sender: TObject);
begin
  ctnMsgPend.Visible := False;
end;

procedure TfrmAcomp.lblTxtCadRepVerMaisClick(Sender: TObject);
begin
  ctnMsgPend.Visible := True;
end;

procedure TfrmAcomp.lblTxtDocPendClick(Sender: TObject);
begin
  frmAnexarDoc.ShowModal();
end;

procedure TfrmAcomp.lblTxtDocRepClick(Sender: TObject);
begin
  frmAnexarDoc.ShowModal();
end;

end.
