unit Mainm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms, uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUImClasses, uniGUIRegClasses, uniGUIForm, uniGUImForm, uniGUImJSForm,
  uniButton, uniBitBtn, unimBitBtn, uniEdit, unimEdit, uniLabel, unimLabel,
  uniGUIBaseClasses, unimPanel, Vcl.Imaging.pngimage, uniImage, unimImage,
  Vcl.Imaging.jpeg, unimScrollBox, unimButton, uniMultiItem, unimSelect, StrUtils;

type
  TfrmPrincipal = class(TUnimForm)
    umpHeader: TUnimPanel;
    umpFooter: TUnimPanel;
    umpBody: TUnimPanel;
    UnimPanel1: TUnimPanel;
    UnimPanel2: TUnimPanel;
    UnimLabel1: TUnimLabel;
    edtNome: TUnimEdit;
    UnimLabel2: TUnimLabel;
    UnimBitBtn1: TUnimBitBtn;
    edtSenha: TUnimEdit;
    UnimLabel3: TUnimLabel;
    edtCPFacomp: TUnimEdit;
    UnimLabel4: TUnimLabel;
    imgBgHeader: TUnimImage;
    UnimLabel5: TUnimLabel;
    UnimLabel6: TUnimLabel;
    imgLogoAGN: TUnimImage;
    scrlBody: TUnimScrollBox;
    UnimImage2: TUnimImage;
    UnimImage1: TUnimImage;
    UnimLabel8: TUnimLabel;
    btnAcomp: TUnimBitBtn;
    edtCPF: TUnimEdit;
    procedure UnimBitBtn1Click(Sender: TObject);
    function VerificaInscricao(cpf: string): integer;
    function proxID(tabela: string): integer;
    procedure btnAcompClick(Sender: TObject);
    function VerificarDigitosCPF(cpf: string): boolean;
    function ValidarCPF(cpf: string): boolean;
    function proxCodGrupo(cidade: string): string;
    function RemoverAcento(palavra: string): string;
    procedure edtCPFExit(Sender: TObject);
    function MD5(const texto:string):string;

  private
    { Private declarations }
  public
    { Public declarations }
  end;

function frmPrincipal: TfrmPrincipal;

implementation

{$R *.dfm}

uses
  uniGUIVars, MainModule, uniGUIApplication, UpreCad, ServerModule, Uacomp,
  Uadmin, UclienteDados, Usolicitacao, IdHashMessageDigest;

function frmPrincipal: TfrmPrincipal;
begin
  Result := TfrmPrincipal(UniMainModule.GetFormInstance(TfrmPrincipal));
end;

function TFrmPrincipal.RemoverAcento(palavra: string): string;
var
  I: integer;
begin
  for I := 1 to length(palavra) do
    if (palavra[I] in ['é','è','ê']) then
    begin
        palavra[I] := 'e';
    end
    else
    if (palavra[I] in ['É','È','Ê']) then
    begin
        palavra[I] := 'E';
    end
    else
    if (palavra[I] in ['á','à','ã','â']) then
    begin
        palavra[I] := 'a';
    end
    else
    if (palavra[I] in ['Á','À','Ã','Â']) then
    begin
        palavra[I] := 'A';
    end
    else
    if (palavra[I] in ['í','ì','Í','Ì','î','Î']) then
    begin
        palavra[I] := 'i';
    end
    else
    if (palavra[I] in ['Í','Ì','Î']) then
    begin
        palavra[I] := 'I';
    end
    else
    if (palavra[I] in ['ó','ò','õ','ô']) then
    begin
        palavra[I] := 'O';
    end
    else
    if (palavra[I] in ['Ó','Ò','Õ','Ô']) then
    begin
        palavra[I] := 'O';
    end
    else
    if (palavra[I] in ['ú','ù']) then
    begin
        palavra[I] := 'u';
    end
    else
    if (palavra[I] in ['Ú','Ù']) then
    begin
        palavra[I] := 'U';
    end
    else
    if (palavra[I] in ['ç']) then
    begin
        palavra[I] := 'c';
    end
    else
    if (palavra[I] in ['Ç']) then
    begin
      palavra[I] := 'C';
    end else
      palavra[I] := palavra[I];

  Result := palavra;

end;

function TFrmPrincipal.MD5(const texto:string):string;
var
  idmd5 : TIdHashMessageDigest5;
begin
  idmd5 := TIdHashMessageDigest5.Create;
  try
    result := idmd5.HashStringAsHex(texto);
  finally
    idmd5.Free;
  end;
end;

function TfrmPrincipal.proxCodGrupo(cidade: string): string;
var
  proxCodGrupo: string;
begin
  cidade := StringReplace(cidade, ' ', '', [rfReplaceAll]);
  cidade := StringReplace(cidade, '-', '', [rfReplaceAll]);
  cidade := StringReplace(cidade, '''', '', [rfReplaceAll]);
  cidade := RemoverAcento(cidade);

  with UniMainModule.FDQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add('select ');
    SQL.Add('MAX(SUBSTRING(nome FROM POSITION(' + QuotedStr('#') + ', nome)+ 1 FOR 4)) as SEQUENCIA ');
    SQL.Add('from tb_grupo ');
    SQL.Add('where SUBSTRING(nome FROM 4 FOR POSITION(' + QuotedStr('#') + ', nome)-4) = ' + QuotedStr(cidade) + ';');
    Open;
    proxCodGrupo := FieldByName('SEQUENCIA').AsString;
  end;

  if proxCodGrupo = '' then proxCodGrupo := '0';

  proxCodGrupo := intToStr(StrToInt(proxCodGrupo) + 1);
  proxCodGrupo := '000' + proxCodGrupo;
  proxCodGrupo := RightStr(proxCodGrupo, 4);

  result := proxCodGrupo;
end;

function TfrmPrincipal.ValidarCPF(cpf: string):boolean;
begin
  if cpf.IsEmpty then
  begin
    result := False;
  end
  else if (cpf.Length <> 11) or
          (cpf = '00000000000') or
          (cpf = '11111111111') or
          (cpf = '22222222222') or
          (cpf = '33333333333') or
          (cpf = '44444444444') or
          (cpf = '55555555555') or
          (cpf = '66666666666') or
          (cpf = '77777777777') or
          (cpf = '88888888888') or
          (cpf = '99999999999') then
  begin
    result := False;
  end
  else if frmPrincipal.VerificarDigitosCPF(cpf) then
  begin
    result := True;
  end
  else
  begin
    result := False;
  end;
end;

function TfrmPrincipal.VerificarDigitosCPF(cpf: string): boolean;
var i, c1, c2, d1, d2, count, count2 : integer;
var digito, digito2 : array[0..8] of Integer;
var digito3, digito4 : array[0..9] of Integer;
begin
  //digito 1
  count := 0;
  for i := 0 to 8 do
  begin
     digito[i] := StrToInt(Copy(cpf,i+1,1));
     digito2[i] := digito[i]*(10-i);
     count := count + digito2[i];
  end;
  count := count mod 11;
  count := 11 - count;
  if count > 9 then c1 := 0 else c1 := count;

  //digito2
  count2 := 0;
  for i := 0 to 9 do
  begin
    if i <= 8 then digito3[i] := digito[i] else digito3[i] := c1;
    digito4[i] := digito3[i]*(11-i);
    count2 := count2 + digito4[i];
  end;
  count2 := count2 mod 11;
  count2 := 11 - count2;
  if count2 > 9 then c2 := 0 else c2 := count2;

  d1 := StrToInt(Copy(cpf,10,1));
  d2 := StrToInt(Copy(cpf,11,1));


  if (d1 = c1) and (d2 = c2) then result := True else result := False;
end;

function TfrmPrincipal.proxID(tabela: string): integer;
var
  id: integer;
begin
  with UniMainModule.FDQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add('select coalesce(max(id), 0) + 1 as ID from ' + tabela);
    Open;
    id := FieldByName('ID').Value;
  end;
  Result := id;
end;

procedure TfrmPrincipal.btnAcompClick(Sender: TObject);
var
  count: integer;
begin
  if (edtCPFacomp.Text = 'admin') AND (edtSenha.Text = 'admin') then
  begin
    frmAdmin.ShowModal();
    Abort;
  end;

  with UniMainModule.FDQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add('select count(*) from tb_usuario where USUARIO = ' + QuotedStr(edtCPFacomp.Text) + ' AND SENHA = ' + QuotedStr(edtSenha.text) + ';');
    Open;
    count := FieldByName('count').Value;
  end;
  if count > 0 then
  begin
    frmAcomp.ShowTitle;
  end
  else
  begin
    ShowMessage('CPF ou senha incorretos, verifique se preencheu corretamente e tente novamente.');
    edtCPFacomp.Text := '';
    edtSenha.Text    := '';
    edtCPFacomp.SetFocus;
  end;

end;

function TfrmPrincipal.VerificaInscricao(cpf: string):integer;
var
  sit : string;
begin

  //Verifica se alguém adicionou esse CPF em algum grupo
  with UniMainModule.FDQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add('select * from tb_grupo');
    Open;
  end;

  //Consulta o CPF no banco de dados
  with UniMainModule.FDQuery do
  begin
    Close;
    SQL.Clear;
    SQL.Add('select s.situacao as situacao from tb_cliente c ');
    SQL.Add('inner join tb_solicitacao s on s.cliente = c.id ');
    SQL.Add('where c.cpf = ' + QuotedStr(cpf));
    SQL.Add(' and s.id = (select max(id) from tb_solicitacao s1 where s1.cliente = c.id);');
    Open;
    sit := FieldByName('situacao').AsString;
  end;

  //Verifica se o CPF inserido já tem solicitacao em andamento
  if sit = 'FINALIZADO' then
  begin
    Result := 0; //Tem CPF cadastrado mas a solicitação está finalizada
  end
  else if sit = '' then
  begin
    Result := 1; //Não tem CPF cadastrado
  end
  else
  begin
    Result := 2; //Tem CPF Cadastrado e solicitação pendente
  end;
end;

procedure TfrmPrincipal.edtCPFExit(Sender: TObject);
begin
  if ValidarCPF(EdtCPF.Text) = False then
  begin
    ShowMessage('CPF INVÁLIDO!');
    EdtCPF.Color := clRed;
    EdtCPF.SetFocus;
  end
end;

procedure TfrmPrincipal.UnimBitBtn1Click(Sender: TObject);
var
  count : integer;
begin
  if ((edtCPF.Text = '') OR (edtNome.Text = '')) then
  begin
    ShowMessage('Algum campo não foi preenchido corretamente. Favor verificar');
    Abort;
  end;

  if ValidarCPF(EdtCPF.Text) = False then
  begin
    ShowMessage('CPF INVÁLIDO!');
    EdtCPF.Color := clRed;
    EdtCPF.SetFocus;
    Abort;
  end;

  //Verifica se o CPF inserido já está cadastrado e se existe solicitação
  case VerificaInscricao(edtCPF.Text) of
    0: //CPF já tem cadastro mas a solicitação já está finalizada
    begin
      //ShowMessage('AGUARDE - Em desenvolvimento');
      ShowMessage('solicitação');
      FrmSolicitacao.ShowModal;
    end;
    1: //CPF ainda não tem cadastro
    begin
//      ShowMessage('pré-cadastro');
      FrmPreCad.ShowModal;
    end;
    2: //CPF já tem cadastro e a solicitação ainda está pendente
    begin
      ShowMessage('Já existe uma solicitação em andamento para esse CPF. Informe sua senha para acompanhar.');
      edtCPFacomp.Text := edtCPF.Text;
      edtCPF.Text   := '';
      edtNome.Text  := '';
      edtSenha.Text := '';
      edtSenha.SetFocus;
    end;
  end;

end;

initialization
  RegisterAppFormClass(TfrmPrincipal);

end.
